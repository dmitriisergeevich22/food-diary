syntax = "proto3";
package package_creator;

import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "./pkg/package-creator-service;package_creator";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Package Creator API"
    version: "1.0.0"
  };
  host: "",
  // Чтобы использовать сваггер локально - закомментить base_path и пересобрать
  base_path: "/package-creator"
  schemes: HTTPS,
  schemes: HTTP,
  consumes: "application/json",
  produces: "application/json"
  security_definitions: {
    security: {
      key: "ApiKeyAuth"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "authorization"
      }
    };
  };
  security: {
    security_requirement: {
      key: "ApiKeyAuth";
      value: {};
    }
  }
};

service PackageCreator {
  rpc CheckHealth(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get: "/health"
    };
  }

  rpc CreatePackage(CreatePackageRequest) returns (CreatePackageResponse) {
    option (google.api.http) = {
      post: "/create"
      body: "*"
    };
  }
}

message CreatePackageRequest {
  string PackageType = 1; // Тип пакета.
  string PackageName = 2; // Наименование пакета.
  string DestinationURL = 3; // URL для отправки.
  bool ReceiverIsHub = 4; // Получатель является Хаб.
  string ReceiverOperatorID = 5; // Код оператора получателя.
  string SenderOperatorID = 6; // Код оператора отправителя.
  // TODO не знаю какой тип тут лучше выбрать. bytes \ string?
  bytes Description = 7; // Описание пакета в формате JSON.
}

message CreatePackageResponse {
  bool status = 1; // true - задача на создание пакета поставлена, false - не удалось поставить задачу на создание пакета
  string err_text = 2; // Описание ошибки
}