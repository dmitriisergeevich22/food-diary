syntax = "proto3";
package food_diary_proto;

import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "./pkg/food-diary;food_diary";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Food Diary API"
    version: "1.0.0"
  };
  host: "",
  base_path: ""
  schemes: HTTPS,
  schemes: HTTP,
  consumes: "application/json",
  produces: "application/json"
  security_definitions: {
    security: {
      key: "ApiKeyAuth"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "authorization"
      }
    };
  };
  security: {
    security_requirement: {
      key: "ApiKeyAuth";
      value: {};
    }
  }
};

service FoodDiary {
  rpc CheckHealth(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get: "/health"
    };
  }

  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/login"
      body: "*"
    };
  }

  rpc LoginRefresh(UserCreateRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/login/refresh"
      body: "*"
    };
  }

  rpc UserCreate(UserCreateRequest) returns (UserCreateResponse) {
    option (google.api.http) = {
      post: "/user/create"
      body: "*"
    };
  }

  rpc UserUpdate(UserCreateRequest) returns (UserCreateResponse) {
    option (google.api.http) = {
      post: "/user/update"
      body: "*"
    };
  }

  rpc UserGetInfo(CreatePackageRequest) returns (CreatePackageResponse) {
    option (google.api.http) = {
      post: "/user/getInfo"
      body: "*"
    };
  }

  rpc ProductCreate(CreatePackageRequest) returns (CreatePackageResponse) {
    option (google.api.http) = {
      post: "/product/create"
      body: "*"
    };
  }

  rpc ProductUpdate(CreatePackageRequest) returns (CreatePackageResponse) {
    option (google.api.http) = {
      post: "/product/update"
      body: "*"
    };
  }

  rpc ProductDelete(CreatePackageRequest) returns (CreatePackageResponse) {
    option (google.api.http) = {
      post: "/product/delete"
      body: "*"
    };
  }

  rpc ProductFind(CreatePackageRequest) returns (CreatePackageResponse) {
    option (google.api.http) = {
      post: "/product/find"
      body: "*"
    };
  }

  rpc EventCreate(CreatePackageRequest) returns (CreatePackageResponse) {
    option (google.api.http) = {
      post: "/event/create"
      body: "*"
    };
  }

  rpc EventDelete(CreatePackageRequest) returns (CreatePackageResponse) {
    option (google.api.http) = {
      post: "/event/delete"
      body: "*"
    };
  }

  rpc EventUpdate(CreatePackageRequest) returns (CreatePackageResponse) {
    option (google.api.http) = {
      post: "/event/delete"
      body: "*"
    };
  }

  rpc EventGet(CreatePackageRequest) returns (CreatePackageResponse) {
    option (google.api.http) = {
      post: "/event/get"
      body: "*"
    };
  }

}

message LoginRequest {
  string email = 1; // Электронная почта.
  string password = 2; // Пароль.
  string phone = 3; // Номер телефона.
  // Токены, равносильны email и password.
  string token_telegeram = 4; // Идентификатор пользователя в телеграм.
}

message LoginRefreshRequest {
  string refresh_token = 1;
}

message LoginResponse {
  string access_token = 1; 
  string refresh_token = 2; 
}



message UserCreateRequest {
  string email = 1; // Электронная почта.
  string password = 2; // Пароль.
  string name = 3; // Имя пользователя (Опционально).
  string phone = 4; // Номер телефона (Опционально).
  // Токены, равносильны email и password.
  string token_telegeram = 10; // Идентификатор пользователя в телеграм.
}

message UserCreateResponse {
  string status = 1; // Статус.
  int64 user_id = 2; // Идентификатор пользователя.
  string err_text = 3; // Описание ошибки если она была.
}

message UserGetInfoRequest {
  int64 user_id = 1; // Идентификатор пользователя.
  string 
}